//
//  AuthOnboardViewController.swift
//  pm-ios
//
//  Created by Synbrix Software on 1/17/20.
//  Copyright (c) 2020 Synbrix Software. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit
import Cartography

final class AuthOnboardViewController: BaseViewController {

    // MARK: - Properties -
    var viewModel: AuthOnboardViewModelType? {
        didSet {
            viewModel?.viewDelegate = self
        }
    }
    
    // MARK: - UI Elements -    
    private let topSpacer: UIView = {
        let view = UIView(frame: .zero)
        view.translatesAutoresizingMaskIntoConstraints = false
        view.backgroundColor = .clear
        return view
    }()

    private lazy var tutorialPageViewController: TutorialPageViewController = {
        let vc = TutorialPageViewController(transitionStyle: .scroll, navigationOrientation: .horizontal, options: nil)
        vc.tutorialDelegate = self
        return vc
    }()

    private let pageControl: UIPageControl = {
        let pageControl = UIPageControl(frame: .zero)
        pageControl.translatesAutoresizingMaskIntoConstraints = false
        pageControl.backgroundColor = .clear
        pageControl.currentPage = 0
        pageControl.currentPageIndicatorTintColor = Colors.panicRed
        pageControl.pageIndicatorTintColor = Colors.opaquePink
        pageControl.addTarget(self, action: #selector(didChangePageControlValue), for: .valueChanged)
        return pageControl
    }()

    private let bottomContainer: UIView = {
        let view = UIView(frame: .zero)
        view.translatesAutoresizingMaskIntoConstraints = false
        view.backgroundColor = .clear
        return view
    }()

    private lazy var stackView: UIStackView = {
        let stackView = UIStackView(frame: .zero)
        stackView.translatesAutoresizingMaskIntoConstraints = false
        stackView.alignment = .fill
        stackView.distribution = .fillEqually
        stackView.axis = .vertical
        stackView.spacing = 8
        return stackView
    }()

    private let signUpButton: ActionButton = {
        let button = ActionButton(frame: .zero, bgColor: Colors.actionColor, highlightColor: Colors.opaquePink)
        button.translatesAutoresizingMaskIntoConstraints = false
        button.setTitle("Sign Up", for: .normal)
        button.backgroundColor = Colors.actionColor
        button.titleLabel?.font = .boldSystemFont(ofSize: 16)
        button.setTitleColor(.white, for: .normal)
        button.addTarget(self, action: #selector(register), for: .touchUpInside)
        button.layer.cornerRadius = 5.0
        button.layer.masksToBounds = true
        return button
    }()

    private let logInButton: ActionButton = {
        let button = ActionButton(frame: .zero, bgColor: .clear, highlightColor: Colors.opaquePink)
        button.translatesAutoresizingMaskIntoConstraints = false
        button.setTitle("Log In", for: .normal)
        button.setTitleColor(Colors.actionColor, for: .normal)
        button.titleLabel?.font = .boldSystemFont(ofSize: 16)
        button.backgroundColor = .clear
        button.addTarget(self, action: #selector(logIn), for: .touchUpInside)
        button.layer.cornerRadius = 5.0
        button.layer.masksToBounds = true
        return button
    }()
    
    // MARK: - Lifecycle -
    override func loadView() {
        super.loadView()
        view.addSubview(topSpacer)
        add(child: tutorialPageViewController, in: view)
        view.addSubview(bottomContainer)
        bottomContainer.addSubview(stackView)
        stackView.addArrangedSubview(pageControl)
        stackView.addArrangedSubview(signUpButton)
        stackView.addArrangedSubview(logInButton)
        layoutSubviews()
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        viewModel?.start()
        setup()
    }
    
    override func viewWillLayoutSubviews() {
        super.viewWillLayoutSubviews()
        layoutSubviews()
    }
    
    // MARK: - Private Helpers -
    private func layoutSubviews() {
        constrain(topSpacer) { view in
            view.top == view.superview!.safeAreaLayoutGuide.top
            view.leading == view.superview!.layoutMarginsGuide.leading
            view.trailing == view.superview!.layoutMarginsGuide.trailing
            view.height == view.superview!.safeAreaLayoutGuide.height * 0.15
        }
        constrain(tutorialPageViewController.view, topSpacer) { view, spacer in
            view.top == spacer.bottom
            view.trailing == view.superview!.layoutMarginsGuide.trailing
            view.leading == view.superview!.layoutMarginsGuide.leading
            view.height == view.superview!.safeAreaLayoutGuide.height * 0.5
        }
        constrain(bottomContainer, tutorialPageViewController.view) { view, pVC in
            view.top == pVC.bottom + 8.0
            view.leading == view.superview!.layoutMarginsGuide.leading
            view.trailing == view.superview!.layoutMarginsGuide.trailing
            view.bottom == view.superview!.safeAreaLayoutGuide.bottom
        }
        constrain(stackView) { view in
            view.top == view.superview!.top + 12.0
            view.leading == view.superview!.leading + 32.0
            view.trailing == view.superview!.trailing - 32.0
            view.bottom == view.superview!.bottom - 12.0
        }
    }
    
    private func setup() {
        view.backgroundColor = Colors.bgColor
    }
	
}

// MARK: - Actions -
extension AuthOnboardViewController {
    
    @objc func didTapNextButton(_ sender: Any) {
        tutorialPageViewController.scrollToNextViewController()
    }

    @objc func didChangePageControlValue() {
        tutorialPageViewController.scrollToViewController(index: pageControl.currentPage)
    }
    
    @objc func logIn(_ sender: UIButton) {
        viewModel?.chooseLogIn()
    }
    
    @objc func register(_ sender: UIButton) {
        viewModel?.chooseRegister()
    }
    
}

// MARK: - View Delegate -
extension AuthOnboardViewController: AuthOnboardViewModelViewDelegate {}

extension AuthOnboardViewController: TutorialPageViewControllerDelegate {

    func tutorialPageViewController(tutorialPageViewController: TutorialPageViewController,
        didUpdatePageCount count: Int) {
        pageControl.numberOfPages = count
    }

    func tutorialPageViewController(tutorialPageViewController: TutorialPageViewController,
        didUpdatePageIndex index: Int) {
        pageControl.currentPage = index
    }

}
